#!/usr/bin/python
from argparse import ArgumentParser
from astropy.io import fits
import numpy as np
from astropy.wcs import WCS
from astropy.nddata import Cutout2D
import ephem
import time
from datetime import datetime, timedelta


#The below sets MWA as the observer
mwa = ephem.Observer()
mwa.lon = '116:40:14.93485'
mwa.lat = '-26:42:11.94986'
mwa.elevation = 377.827 #from sea level


def main():
    parser = ArgumentParser("dsnrs",description="plots dsnrs for various delays")
    parser.add_argument("--delay", required=True, type=int,help="The time delay to position")
    parser.add_argument("--obs",required=True,type=int,help="the observation number")
    parser.add_argument("--noradid",required=True,type=int,help="The norad of the satellite")
    parser.add_argument("--noTimeSteps",required=True,type=int,help="The number of timeSteps")
    parser.add_argument("--prefix",required=True,help="The prefix to be used for the output file")
    parser.add_argument("--boxSize",default=5,type=int,help="The size of the dsnrs box")
    parser.add_argument("--debug",default=False,type=bool,help="If true, prints out stuff")
    parser.add_argument("--noChannels",default=768,type=int,help="The number of fine channels")
    args = parser.parse_args()
    debug = args.debug
    waterfall = np.zeros((args.noTimeSteps,args.noChannels))
    f = open("/astro/mwasci/sprabu/satellites/MWA-fast-image-transients/HexFMSurveySolution/LEOTLE.txt")
    line = f.readline()
    counter = 1
    while line:
	if counter%2 ==1:
	    line2 = line
	else:
	    line3 = line
	    satID = int(line2[2] + line2[3] + line2[4] + line2[5] + line2[6] )
	    if satID == args.noradid:
		satline2 = line2
		satline3 = line3
		break
    f = open("/astro/mwasci/sprabu/satellites/MWA-fast-image-transients/HexFMSurveySolution/MEOTLE.txt")
    line = f.readline()
    counter = 1
    while line:
        if counter%2 ==1:
            line2 = line
        else:
            line3 = line
            satID = int(line2[2] + line2[3] + line2[4] + line2[5] + line2[6] )
            if satID == args.noradid:
                satline2 = line2
                satline3 = line3
                break
    f = open("/astro/mwasci/sprabu/satellites/MWA-fast-image-transients/HexFMSurveySolution/HEOTLE.txt")
    line = f.readline()
    counter = 1
    while line:
        if counter%2 ==1:
            line2 = line
        else:
            line3 = line
            satID = int(line2[2] + line2[3] + line2[4] + line2[5] + line2[6] )
            if satID == args.noradid:
                satline2 = line2
                satline3 = line3
                break



    sat = ephem.readtle("sat",satline2,satline3)

    for timeStep in range(args.noTimeSteps):
	for f in range(args.noChannels):
	    hud1 = fits.open('1142425368-2m-' + str(timeStep) + '-' + str(f).zfill(4)+ '-image.fits')
	    hud2 = fits.open('1142425368-2m-' + str(timeStep+1) + '-' + str(f).zfill(4)+ '-image.fits')
	    if debug is True:
		print("working on channel " + str(f+1) + "/" + str(args.noChannels)  + " at timeStep " + str(args.timeStep) )
 	    diff = hdu2[0].data[0,0,:,:] - hdu1[0].data[0,0,:,:]
	    
  	    if np.all(diff ==0):
		continue
	    
	    UTCTime = datetime.strptime(hdu2[0].header['DATE-OBS'], '%Y-%m-%dT%H:%M:%S.%f') + timedelta(seconds=args.delay)
	    wcs = WCS(hdu2[0].header,naxis=2)
	    mwa.date = UTCTime
	    sat.compute(mwa)
	    xy = wcs.all_world2pix([[np.degrees(sat.ra.real), np.degrees(sat.dec.real)]], 1)[0]
	    x = int(np.floor(xy[0]))
	    y = int(np.floor(xy[1]))
	
	    cutoutData = Cutout2D(diff, (x,y), (args.boxSize,args.boxSize))
	    
	    mwa.date = UTCTime + timedelta(seconds=-20)
	    sat.compute(mwa)
	    xy = wcs.all_world2pix([[np.degrees(sat.ra.real), np.degrees(sat.dec.real)]], 1)[0]
	    x = int(np.floor(xy[0]))
	    y = int(np.floor(xy[1]))

	    cutoutNoise = Cutout2D(diff, (x,y), (200,200))

	    signal = np.sum(cutoutData.data)
            noise = np.sqrt(np.mean(cutoutNoise.data**2.0))
	    waterfall[int(timeStep),int(f)] = (signal/(args.boxSize**2.0))/noise

    np.save(str(args.prfix) + "-obs-" + str(args.obs) + "-delay-" + str(args.delay),waterfall)

	    

  	    
	    

	

if __name__ == "__main__":
    main()
