#!/usr/bin/env python
from __future__ import division
from __future__ import print_function
from astropy.io import fits
import numpy as np
from astropy.wcs import WCS
from astropy.nddata import Cutout2D
import os.path
from argparse import ArgumentParser
import time
from datetime import datetime, timedelta
import csv
from subprocess import call
from scipy.spatial import distance
from mwassa.imginfo import info
from mwassa.plotting import intialiseMatplotib
from warnings import filterwarnings
filterwarnings("ignore")
import sys
from tqdm import tqdm
import scipy.optimize as opt
from astropy.wcs import WCS
from astropy.coordinates import AltAz, SkyCoord, EarthLocation
import astropy.units as u

pos = EarthLocation(lon=116.67083333*u.deg, lat=-26.70331941*u.deg, height=377.827*u.m)

def eprint(*args, **kwargs):
    """
    prints function in stderr so that the print is logged
    """
    print(*args, file=sys.stderr, **kwargs)


def floodfill(xs, ys, floodfillValue, diff, streak):
    """
    performs the forest fire algorithm to source find satellites
    """

    q = []
    q.append([xs, ys])

    while q:
        
        x, y = q.pop()
        binaryMap[x, y] = 1
        binaryMapTemp[x, y] = 1
        binarMapNoFreq[x, y] += 1


        if streak == "head":
            if diff[x,y] > binaryMapPeakFlux[x,y]:
                binaryMapPeakFlux[x,y] = diff[x,y]
        elif streak == "Tail":
            if diff[x,y] < binaryMapPeakFlux[x,y]:
                binaryMapPeakFlux[x,y] = diff[x,y]

        
        if checkValid(x+1, y, floodfillValue, streak, diff):
            q.append([x+1, y])
        
        if checkValid(x, y+1, floodfillValue, streak, diff):
            q.append([x, y+1])
        
        if checkValid(x-1, y, floodfillValue, streak, diff):
            q.append([x-1, y])

        if checkValid(x, y-1, floodfillValue, streak, diff):
            q.append([x, y-1])

        if checkValid(x+1, y+1, floodfillValue, streak, diff):
            q.append([x+1, y+1])

        if checkValid(x+1, y-1, floodfillValue, streak, diff):
            q.append([x+1, y-1])

        if checkValid(x-1, y-1, floodfillValue, streak, diff):
            q.append([x-1, y-1])

        if checkValid(x-1, y+1, floodfillValue, streak, diff):
            q.append([x-1, y+1])
    
    return

def checkValid(x, y, floodfillValue, streak, diff):
    """
    checks the validy of the pixel
    """

    output = False

    if streak == "head":
        if 1 < x < (imgSize-1) and 1 < y < (imgSize-1) and  diff[x,y] >= floodfillValue and binaryMapTemp[x,y] == 0:
            output = True

    elif streak == "Tail":
        if 1 < x < (imgSize-1) and 1 < y < (imgSize-1) and  diff[x,y] <= floodfillValue and binaryMapTemp[x,y] == 0:
            output = True

    return output


def xy2RaDec(x_array, y_array, wcs):
    """
    converts pixel coords to ra dec

    Parameters
    ----------
    x   : x pixel coord
    y   : y pixel coord
    wcs : world coord system obj

    Returns
    -------
    ra  : ra in degrees
    dec : dec in degrees
    """
    pixcrd = np.array([x_array, y_array], dtype=np.float64).T
    world = wcs.wcs_pix2world(pixcrd, 0)
    #print(world)
    ra_array, dec_array = world.T
    

    return ra_array, dec_array


def getAltAz(ra_array, dec_array, time, wcs):
    """
    converts pixel coords to alt az

    Parameters
    ----------
    x   : x pixel coord
    y   : y pixel coord
    time: utc time object
    wcs : wcs object

    Returns
    -------
    az  : azimuth (degrees)
    el  : elevation (degrees)
    """
    
    #pixcrd = np.array([[0 ,0 ],[x, y]], dtype=np.float64)
    #world = wcs.wcs_pix2world(pixcrd, 0)
    coord = SkyCoord(ra_array, dec_array,unit=(u.deg,u.deg))
    coord.time = time + timedelta(hours=pos.lon.hourangle)
    coord = coord.transform_to(AltAz(obstime=time, location=pos))

    return np.degrees(coord.alt.rad), np.degrees(coord.az.rad)


def getMeasurements(maskedData, seedValue, wcs, time, streak, diff, std):
    """
    get relevent info about the detections
    
    Parameters
    ----------
    maskedData  : 2d array containing just the streak (head/tail)
    seedValue   : the seedValue to stop fitting beams
    wcs         : the wcs object
    time        : the current utc time
    streak      : the part of streak currently being investigated
    diff        : the diff image
    std         : standard deviation

    Returns
    -------
    x_array     : x pixel
    y_array     : y pixel
    ra_array    : ra of the pixel
    dec_array   : dec of the pixel
    az_array    : az of the pixel
    el_array    : el of the pixel
    amp_array   : amp of the pixel
    snr_array   : snr of the pixel
    """

    x_array, y_array, ra_array, dec_array, az_array,alt_array = [], [], [], [], [], []
    amp_array, snr_array = [], []

    points = np.array(np.where(maskedData > 0)).T

    for p in points:
        #print("p {0}".format(p))
        row, col = p
        #print("row {1} col {2}".format(p,row, col))
        amp_array.append(maskedData[row, col])
        sigma = diff[row, col]/std
        snr_array.append(sigma)
        x_array.append(col)
        y_array.append(row)
        #ra, dec = xy2RaDec(col, row, wcs)
        #ra_array.append(ra)
        #dec_array.append(dec)
        #alt, az = getAltAz(col, row, time, wcs)
        #el_array.append(alt)
        #az_array.append(az)

    ra_array, dec_array = xy2RaDec(x_array, y_array, wcs)
    alt_array, az_array = getAltAz(ra_array, dec_array, time, wcs)

        
    return x_array, y_array, ra_array, dec_array, az_array,alt_array, amp_array, snr_array




def main(obs, freqChannels, timeStep, seedSigma, floodfillSigma,\
    prefix, deltaF, streak, ext, allEvents, midName):

    plt = intialiseMatplotib(plot)

    #The below are the output arrays
    global binaryMap
    binaryMap = np.zeros((imgSize,imgSize))
    global binaryMapNoPixels
    binaryMapNoPixels = np.zeros((imgSize,imgSize))
    global binarMapNoFreq
    binarMapNoFreq = np.zeros((imgSize,imgSize))
    global binaryMapPeakFlux
    binaryMapPeakFlux = np.zeros((imgSize,imgSize))
    global binaryMapDistFromPC
    binaryMapDistFromPC = np.zeros((imgSize,imgSize))
    global binaryMapSeed
    binaryMapSeed = np.zeros((imgSize,imgSize))

    saveFilePrefix=""
    if streak == "Tail":
        saveFilePrefix="Neg"
    
    ## update the prfix if midname not 2m. This done to incorporate multiple bands of obs for spacefest
    if (midName == "2m") == False:
        saveFilePrefix = midName + saveFilePrefix



    ## create the csv file for saving measurements
    with open(saveFilePrefix + "measuredValues_t" + str(timeStep).zfill(4) + ".csv", "w") as vsc:
        thewriter = csv.writer(vsc)
        thewriter.writerow(["ra", "dec", "SNR", "sourceNo","FluxDensity","az", "elv", "freq", "utc" ,"channelNo","timeStep","x","y","headFile","tailFile","floodfillSigma","seedSigma"])

    beams = 0 # later used to save in measurment.csv
    sourceNo =0

    
    for f in range(freqChannels):

        f += args.deltaF

        if debug is True:
            eprint("Working of frequency channel " + str(f+1) + " at timeStep " + str(timeStep))

        try:
            hdu1 = fits.open(str(args.obs) + "-"+str(midName)+"-" + str(timeStep) +"-"+ str(f).zfill(4)  + "-" +str(args.ext)+".fits")
            hdu2 = fits.open(str(args.obs) + "-"+str(midName)+"-" + str(timeStep+1) + "-"+str(f).zfill(4)+ "-" +str(args.ext)+".fits")
            header = hdu2[0].header
            wcs = WCS(header, naxis=2)
            time = datetime.strptime(header['DATE-OBS'][:-2], '%Y-%m-%dT%H:%M:%S')
            freq = float(header['CRVAL3'])/1000000
        except:
            
            eprint("file not found t {0} f {1}".format(timeStep, f))
            eprint(str(args.obs) + "-"+str(midName)+"-" + str(timeStep) +"-"+ str(f).zfill(4)  + "-" +str(args.ext)+".fits")
            eprint(str(args.obs) + "-"+str(midName)+"-" + str(timeStep+1) + "-"+str(f).zfill(4)+ "-" +str(args.ext)+".fits")
            continue

        data1 = hdu1[0].data[0,0,:,:]
        data2 = hdu2[0].data[0,0,:,:]

        if np.all(data1 == 0) or np.all(data2 == 0):
            
            if debug:
                eprint("image full of zeros at t {0} and f {1}".format(timeStep, f))
            
            continue
        
        diff = data2 - data1
        std = np.nanstd(diff)
        seedValue = seedSigma*std
        floodfillValue = floodfillSigma*std
        global binaryMapTemp

        if allEvents:
            seeds = np.asarray(np.where(diff >= seedValue)).T
            for seed in seeds:
                binaryMapTemp = np.zeros((imgSize,imgSize))

                if debug is True:
                    eprint("RFI detected at t {0} f {1}, seeding....".format(timeStep, f))

                binaryMapSeed[seed[0], seed[1]] = 1
                
                if debug:
                    eprint("starting floodfill")
                floodfill(seed[0], seed[1], floodfillValue, diff, streak)
                testPoints = np.asarray(np.where(binaryMapTemp==1)).T
                Maxdistance = np.max(distance.cdist(testPoints,testPoints))
                binaryMapNoPixels[np.where(binaryMapTemp==1)] = Maxdistance
                contourPoints = np.asarray(np.where(binaryMapTemp ==1))
                if debug:
                    eprint("getting measurements")
                maskedData = binaryMapTemp*diff
                x_array, y_array, ra_array, dec_array, az_array,el_array, amp_array, snr_array =\
                 getMeasurements(maskedData, seedValue, wcs, time, streak, diff, std)

                if debug:
                    eprint("done...writing to file.....")

                with open(saveFilePrefix + "measuredValues_t" + str(timeStep).zfill(4) + ".csv", "a") as vsc:
                    thewriter = csv.writer(vsc)
                    sourceNo += 1

                    for x,y,ra,dec,az,el,amp, snr in zip(x_array, y_array, ra_array, dec_array, az_array,el_array, amp_array, snr_array):
                        #"ra", "dec", "SNR", "sourceNo","FluxDensity","az", "elv", "freq", "utc" ,"channelNo","timeStep","x","y","headFile","tailFile","floodfillSigma","seedSigma"
                        line = [ra, dec, str(snr) , str(timeStep) + "." + str(sourceNo),\
                        amp,az, el, freq, time, f, timeStep, x, y,str(args.obs) + "-2m-" + str(timeStep+1) + "-" + str(f).zfill(4) + "-"+str(args.ext)+".fits", \
                        str(args.obs) + "-2m-" + str(timeStep) + "-" + str(f).zfill(4) + "-"+str(args.ext)+".fits",floodfillSigma, seedSigma ]
                        thewriter.writerow(line)

                if debug:
                    eprint("done")

                # the below breaks out if the current rfi is already investigated
                if len(contourPoints[0,:]) is 0:
                    continue



	### default setting when we search only for the brightest event
        
        def make_dsnrs(channels, mask, c):
            signal_array =  np.zeros(channels)
            snr_array = np.zeros(channels)
            
            if debug:
                print("making dsnrsn")

            for fi in range(channels):

                if debug:
                    print("dsnrs at channel {}".format(fi))
                hdu1 = fits.open(str(args.obs) + "-"+str(midName)+"-" + str(timeStep) +"-"+ str(fi).zfill(4)  + "-" +str(args.ext)+".fits")
                hdu2 = fits.open(str(args.obs) + "-"+str(midName)+"-" + str(timeStep+1) + "-"+str(fi).zfill(4)+ "-" +str(args.ext)+".fits")
                diff = hdu2[0].data[0,0,:,:] - hdu1[0].data[0,0,:,:]
                tmp = np.copy(diff)
                diff *= mask
                signal_array[fi] = np.nanmax(diff)
                if np.all(diff == 0):
                    continue
                tmp[np.abs(tmp) > 3*np.std(tmp)] = 0
                tmp[np.abs(tmp) > 3*np.std(tmp)] = 0
                noise = np.std(tmp)
                snr = np.nanmax(diff)/noise
                snr_array[fi] = snr
                

            fig, ax = plt.subplots(figsize=(10,10))
            plt.subplot(221)
            plt.plot(signal_array)
            plt.xlabel("channel no")
            plt.ylabel("dsnrs")

            plt.subplot(222, projection=wcs)
            plt.title("event mask")
            plt.imshow(mask, origin="lower")
            plt.grid()

            
            plt.subplot(223)
            plt.title("snr")            
            plt.plot(snr_array)
            plt.hlines(6, 0 , channels)
            

            
            hdu1 = fits.open(str(args.obs) + "-"+str(midName)+"-" + str(timeStep) +"-"+ str(f).zfill(4)  + "-" +str(args.ext)+".fits")
            hdu2 = fits.open(str(args.obs) + "-"+str(midName)+"-" + str(timeStep+1) + "-"+str(f).zfill(4)+ "-" +str(args.ext)+".fits")
            diff = hdu2[0].data[0,0,:,:] - hdu1[0].data[0,0,:,:]

            plt.subplot(224, projection=wcs)
            plt.title("channel {}".format(f))
            plt.imshow(diff, origin="lower")
            plt.grid()
            plt.colorbar()

            plt.savefig("rfiseekerEvent-t{}-f{}.png".format(timeStep, f))
        

            return 

        if not allEvents:
            if streak == "Tail":
                seedValue = - float(args.seedSigma)*std
                floodfillValue =  - float(args.floodfillSigma)*std

            # The below checks if max point is greater than seed value
            thePoint = np.asarray(np.where(diff == np.nanmax(diff)))
        
            if streak == "Tail":
                thePoint = np.asarray(np.where(diff == np.nanmin(diff)))

            if diff[thePoint[0][0],thePoint[1][0]] < seedValue and streak == "head":
                continue

            elif diff[thePoint[0][0], thePoint[1][0]] > seedValue and streak == "Tail":
                continue

            
            binaryMapTemp = np.zeros((imgSize,imgSize)) ## binarymap that stores only the local RFI

            if debug is True:
                eprint("RFI detected at t {0} f {1}, seeding....".format(timeStep, f))

            binaryMapSeed[thePoint[0][0], thePoint[1][0]] = 1



            if debug:
                eprint("starting floodfill")
            binaryMapBefore = np.copy(binaryMap)
            floodfill(thePoint[0][0], thePoint[1][0], floodfillValue, diff, streak)
            
            if debug:
                eprint("done")
            testPoints = np.asarray(np.where(binaryMapTemp==1)).T
            Maxdistance = np.max(distance.cdist(testPoints,testPoints))
            binaryMapNoPixels[np.where(binaryMapTemp==1)] = Maxdistance
            contourPoints = np.asarray(np.where(binaryMapTemp ==1))
            if dsnrs:
                ## check if event previusly detected (to avoid making dsnrs again)
                if binaryMapBefore[thePoint[0][0], thePoint[1][0]] == 0:
                    make_dsnrs(freqChannels, binaryMapTemp, f)

            # obtain the masked data and write measurement to file
            if debug:
                eprint("getting measurements")
            maskedData = binaryMapTemp*diff
            x_array, y_array, ra_array, dec_array, az_array,el_array, amp_array, snr_array =\
             getMeasurements(maskedData, seedValue, wcs, time, streak, diff, std)
      
            if debug:
                eprint("done...writing to file.....")

            with open(saveFilePrefix + "measuredValues_t" + str(timeStep).zfill(4) + ".csv", "a") as vsc:
                thewriter = csv.writer(vsc)
                sourceNo += 1

                for x,y,ra,dec,az,el,amp, snr in zip(x_array, y_array, ra_array, dec_array, az_array,el_array, amp_array, snr_array):
                    #"ra", "dec", "SNR", "sourceNo","FluxDensity","az", "elv", "freq", "utc" ,"channelNo","timeStep","x","y","headFile","tailFile","floodfillSigma","seedSigma"
                    line = [ra, dec, str(snr) , str(timeStep) + "." + str(sourceNo),\
                    amp,az, el, freq, time, f, timeStep, x, y,str(args.obs) + "-2m-" + str(timeStep+1) + "-" + str(f).zfill(4) + "-"+str(args.ext)+".fits", \
                    str(args.obs) + "-2m-" + str(timeStep) + "-" + str(f).zfill(4) + "-"+str(args.ext)+".fits",floodfillSigma, seedSigma ]
                    thewriter.writerow(line)

            if debug:
                eprint("done")

            # the below breaks out if the current rfi is already investigated
            if len(contourPoints[0,:]) is 0:
                continue
        
   
              

     

        
    ## the below saves the found values as fits file
    if debug:
        eprint("saving files...")
    

    if os.path.isfile(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMap-t" + str(timeStep).zfill(4) + ".fits"):
        bashSyn1 = "rm "+ str(saveFilePrefix) + str(args.prefix) + "Sigma" + "RFIBinaryMap-t" + str(timeStep).zfill(4) + ".fits"
        bashExecute1 = call(bashSyn1,shell=True)

    hdun = fits.PrimaryHDU(binaryMap,header=header)
    hdun.writeto(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMap-t" + str(timeStep).zfill(4) + ".fits")

    if os.path.isfile(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMapPeakFlux-t" + str(timeStep).zfill(4) + ".fits"):
        bashSyn3 = "rm " +str(saveFilePrefix)+ str(args.prefix) + "Sigma" + "RFIBinaryMapPeakFlux-t" + str(timeStep).zfill(4) + ".fits"
        bashExecute3 = call(bashSyn3,shell=True)

    hdun2 = fits.PrimaryHDU(binaryMapPeakFlux,header=header)
    hdun2.writeto(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMapPeakFlux-t" + str(timeStep).zfill(4) + ".fits")

    if os.path.isfile(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMapSeed-t" + str(timeStep).zfill(4) + ".fits"):
        bashSyn4  = "rm " +str(saveFilePrefix)+ str(args.prefix) + "Sigma" + "RFIBinaryMapSeed-t" + str(timeStep).zfill(4) + ".fits"       
        bashExecute4 = call(bashSyn4,shell=True)

    hdu3 =  fits.PrimaryHDU(binaryMapSeed,header=header)
    hdu3.writeto(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMapSeed-t" + str(timeStep).zfill(4) + ".fits")
 

    ## The below makes the CSV file containing the meta data from the RFISeeker
    if os.path.isfile(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "-FreqInfo-t" + str(timeStep).zfill(4)+ ".csv"):
        bashSyn2 = "rm " +str(saveFilePrefix)+ str(args.prefix) + "Sigma" + "-FreqInfo-t" + str(timeStep).zfill(4)+ ".csv"
        bashExecute2 = call(bashSyn2,shell=True)

    with open(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "-FreqInfo-t" + str(timeStep).zfill(4)+ ".csv","w") as vsc:
        thewriter = csv.writer(vsc)
        thewriter.writerow(["x","y","PeakFluxDensity","NoOfChannels","DistanceFromPhaseCenter","NoOfPixels"])
        points = np.asarray(np.where(binaryMap != 0)).T

        for p in points:
            x,y = p
            peakFluxDensity = binaryMapPeakFlux[x,y]
            NoOfChannels = binarMapNoFreq[x,y]
            DistanceFromPhaseCenter = binaryMapDistFromPC[x,y]
            NoOfPixels = binaryMapNoPixels[x,y]
            line = [x,y,peakFluxDensity,NoOfChannels,DistanceFromPhaseCenter,NoOfPixels]
            thewriter.writerow(line)

    
    if debug:
        eprint("finished t {0} ".format(timeStep))    

    #### "That's all Folks!"" ###        
    if debug:
        eprint(" That's all Folks! ")
    



if __name__ == "__main__":
    parser = ArgumentParser("Flagger", description="Flagges and plots DSNRS for RFI")
    parser.add_argument('--obs', required=True, help="The observation id")
    parser.add_argument('--freqChannels', default=768,type=int, help="Number of frequency channels to process")
    parser.add_argument('--timeStep', required=True, type=int, help="The timestep at which RFISeeker runs")
    parser.add_argument('--seedSigma', default=8, type=float, help="The sigma threshold for RFI seeding" )
    parser.add_argument('--floodfillSigma', default=3, type=float,help="The sigma upto which flood fill happens")
    parser.add_argument('--debug', default=False, type=bool,help="Prints out more values and shows figure if ran in debug mode")
    parser.add_argument('--plot', default=False, type=bool,help="shows figure")
    parser.add_argument('--prefix',required=False,help="The prefix used in the ouputfiles")
    parser.add_argument('--DSNRS',default=False, type=bool,help="Disable/Enable DSNRS analysis")
    parser.add_argument('--deltaF',required=False,default=0,type=int,help='The offset in frequency')
    parser.add_argument("--streak", default="head", choices=["head", "Tail"],help="The part of streak to extrack i.e head or tail")
    parser.add_argument("--midName",default="2m", help="the mid name of the fits files")
    parser.add_argument("--imgSize", required=True, type=int, help="the size of image (1 Dimension alone)")
    parser.add_argument("--config",default=False,type=bool, help="allow multiple detections? Default=False")
    parser.add_argument('--ext',default="dirty",help="choose between dirty and iamge")
    args = parser.parse_args()
    
    global debug, dsnrs, imgSize, plot
    debug = args.debug
    dsnrs = args.DSNRS
    imgSize = args.imgSize
    plot = args.plot

    if debug:
        eprint("running rfiseeker in debug mode at timeStep {0}".format(args.timeStep))

    main(args.obs, args.freqChannels, args.timeStep, args.seedSigma, args.floodfillSigma,\
    args.prefix, args.deltaF, args.streak, args.ext, args.config, args.midName)
