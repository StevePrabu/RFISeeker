#!/usr/bin/python 
from __future__ import division
from __future__ import print_function
from astropy.io import fits
import numpy as np
from astropy.wcs import WCS
from astropy.nddata import Cutout2D
import os.path
from argparse import ArgumentParser
import time
from datetime import datetime, timedelta
import csv
from subprocess import call
from scipy.spatial import distance
from mwassa.imginfo import info
from mwassa.plotting import intialiseMatplotib
from warnings import filterwarnings
filterwarnings("ignore")
import sys



def floodfillTail(xs, ys ,floodfillValue, diff, imgSize):
    """
    This function finds all adjacent pixels over the provided floodfill value
    """
    q = []
    q.append([xs, ys])

    def checkValid(x,y, floodfillValue):
        """
        checks if the pixel is near the edge of the image
        """

        output = False

        if 1 < x < (imgSize-1) and 1 < y < (imgSize-1) and  diff[x,y] <= floodfillValue and binaryMapTemp[x,y] == 0:
            output = True

        return output


    while q:
        x, y = q.pop()
        if diff[x, y] <= floodfillValue and binaryMapTemp[x, y] == 0:
            binaryMap[x, y] = 1
            binaryMapTemp[x, y] = 1
            binarMapNoFreq[x,y] += 1

            if diff[x,y] < binaryMapPeakFlux[x,y]:
                binaryMapPeakFlux[x,y] = diff[x,y]

            #the below saves the distance from pointing center
            binaryMapDistFromPC[x,y] = np.sqrt((x-(imgSize/2.0))**2.0+(y-(imgSize/2.0))**2.0)*0.0833333

            if checkValid(x+1,y,floodfillValue):
                q.append([x+1,y])

            if checkValid(x, y+1, floodfillValue):
                q.append([x, y+1])

            if checkValid(x-1,y,floodfillValue):
                q.append([x-1,y])

            if checkValid(x, y-1, floodfillValue):
                q.append([x, y-1])

            if checkValid(x-1, y-1, floodfillValue):
                q.append([x-1, y-1])

            if checkValid(x+1,y-1,floodfillValue):
                q.append([x+1, y-1])

            if checkValid(x-1, y+1, floodfillValue):
                q.append([x-1, y+1])

            if checkValid(x+1, y+1, floodfillValue):
                q.append([x+1,y+1])

    return



def floodfillHead(xs, ys ,floodfillValue, diff, imgSize):
    """
    This function finds all adjacent pixels over the provided floodfill value
    """
    q = []
    q.append([xs, ys])

    def checkValid(x,y, floodfillValue):
        """
        checks if the pixel is near the edge of the image
        """

        output = False

        if 1 < x < (imgSize-1) and 1 < y < (imgSize-1) and  diff[x,y] >= floodfillValue and binaryMapTemp[x,y] == 0:
            output = True

        return output
        

    while q:
        x, y = q.pop()
        if diff[x, y] >= floodfillValue and binaryMapTemp[x, y] == 0:
            binaryMap[x, y] = 1
            binaryMapTemp[x, y] = 1
            binarMapNoFreq[x,y] += 1

            if diff[x,y] > binaryMapPeakFlux[x,y]:
                binaryMapPeakFlux[x,y] = diff[x,y]

            #the below saves the distance from pointing center
            binaryMapDistFromPC[x,y] = np.sqrt((x-(imgSize/2.0))**2.0+(y-(imgSize/2.0))**2.0)*0.0833333
           
            if checkValid(x+1,y,floodfillValue):
                q.append([x+1,y])

            if checkValid(x, y+1, floodfillValue):
                q.append([x, y+1])

            if checkValid(x-1,y,floodfillValue):
                q.append([x-1,y])

            if checkValid(x, y-1, floodfillValue):
                q.append([x, y-1])

            if checkValid(x-1, y-1, floodfillValue):
                q.append([x-1, y-1])

            if checkValid(x+1,y-1,floodfillValue):
                q.append([x+1, y-1])

            if checkValid(x-1, y+1, floodfillValue):
                q.append([x-1, y+1])

            if checkValid(x+1, y+1, floodfillValue):
                q.append([x+1,y+1])

    return
            


def main():
    parser = ArgumentParser("Flagger", description="Flagges and plots DSNRS for RFI")
    parser.add_argument('--obs', required=True, help="The observation id")
    parser.add_argument('--freqChannels', default=768,type=int, help="Number of frequency channels to process")
    parser.add_argument('--timeStep', required=True, type=int, help="The timestep at which RFISeeker runs")
    parser.add_argument('--seedSigma', default=8, help="The sigma threshold for RFI seeding" )
    parser.add_argument('--floodfillSigma', default=3, help="The sigma upto which flood fill happens")
    parser.add_argument('--debug', default=False, type=bool,help="Prints out more values and shows figure if ran in debug mode")
    parser.add_argument('--prefix',required=False,help="The prefix used in the ouputfiles")
    parser.add_argument('--DSNRS',default=True,help="Disable/Enable DSNRS analysis")
    parser.add_argument('--deltaF',required=False,default=0,type=int,help='The offset in frequency')
    parser.add_argument("--streak", default="head", choices=["head", "Tail"],help="The part of streak to extrack i.e head or tail")
    parser.add_argument('--ext',default="dirty",help="choose between dirty and iamge")
    args = parser.parse_args()
    debug = args.debug
    timeStep = args.timeStep

    #The below obtains some preiliminary data and checks
    imgSize, wcs, header = info(str(args.obs) + "-2m-" + str(args.timeStep) + "-" + str(0).zfill(4) + "-"+str(args.ext)+".fits")
    plt = intialiseMatplotib(debug)
    
    #The below are the output arrays
    global binaryMap
    binaryMap = np.zeros((imgSize,imgSize))
    global binaryMapNoPixels
    binaryMapNoPixels = np.zeros((imgSize,imgSize))
    global binarMapNoFreq
    binarMapNoFreq = np.zeros((imgSize,imgSize))
    global binaryMapPeakFlux
    binaryMapPeakFlux = np.zeros((imgSize,imgSize))
    global binaryMapDistFromPC
    binaryMapDistFromPC = np.zeros((imgSize,imgSize))
    global binaryMapSeed
    binaryMapSeed = np.zeros((imgSize,imgSize))

    saveFilePrefix=""
    if args.streak == "Tail":
        saveFilePrefix="Neg"

    for f in range(args.freqChannels):

        if timeStep in [0]:
            break
        f += args.deltaF

        if debug is True:
            print("Working of frequency channel " + str(f+1) + "/" + str(args.freqChannels))
        
        hdu1 = fits.open(str(args.obs) + "-2m-" + str(timeStep) + "-" + str(f).zfill(4) + "-"+str(args.ext)+".fits")
        hdu2 = fits.open(str(args.obs) + "-2m-" + str(timeStep+1) + "-" + str(f).zfill(4) + "-"+str(args.ext)+".fits")

        diff = hdu2[0].data[0,0,:,:] - hdu1[0].data[0,0,:,:]
        std = np.std(diff)

        # The below skips all flagged channels
        if np.all(diff == 0):
            continue

        seedValue = float(args.seedSigma)*std
        floodfillValue = float(args.floodfillSigma)*std

        if args.streak == "Tail":
            seedValue = - float(args.seedSigma)*std
            floodfillValue =  - float(args.floodfillSigma)*std

        # The below checks if max point is greater than seed value
        maxPoint = np.asarray(np.where(diff == np.max(diff)))
        if args.streak == "Tail":
            maxPoint = np.asarray(np.where(diff == np.min(diff)))
      
        if diff[maxPoint[0][0],maxPoint[1][0]] < seedValue and args.streak == "head":
            continue

        elif diff[maxPoint[0][0],maxPoint[1][0]] > seedValue and args.streak == "Tail":
            continue

        global binaryMapTemp
        binaryMapTemp = np.zeros((imgSize,imgSize)) ## binarymap that stores only the local RFI

        if debug is True:
            print("RFI detected, seeding....")
        
        binaryMapSeed[maxPoint[0][0], maxPoint[1][0]] = 1
        if arg.streak == "head":
            floodfillHead(maxPoint[0][0], maxPoint[1][0], floodfillValue,diff , imgSize)    
        elif arg.streak == "Tail":
            floodfillTail(maxPoint[0][0], maxPoint[1][0], floodfillValue,diff , imgSize)
        testPoints = np.asarray(np.where(binaryMapTemp==1)).T
	Maxdistance = np.max(distance.cdist(testPoints,testPoints))
        binaryMapNoPixels[np.where(binaryMapTemp==1)] = Maxdistance
        contourPoints = np.asarray(np.where(binaryMapTemp ==1))

        ## the below breaks out if the current rfi is already investigated
        if len(contourPoints[0,:]) is 0:
            continue

        cutout = Cutout2D(diff, (maxPoint[1][0],maxPoint[0][0]), (100,100), wcs=wcs)
        ax = plt.subplot(221, projection=cutout.wcs)
        plt.imshow(cutout.data, cmap=plt.cm.inferno, origin="lower")
        plt.grid(color="black",linestyle='-')
        plt.colorbar()
         
        if args.DSNRS == True:
            snr_array = [None]*args.freqChannels
            plt.subplot(222)

            for f2 in range(args.freqChannels):

                if debug is True:
                    print("Plotting DSNRS spectrum for RFI at freq " + str(f2))

                hdutemp1 = fits.open(str(args.obs) +"-2m-" + str(timeStep) + "-" + str(f2).zfill(4) + "-"+str(args.ext)+".fits")
                hdutemp2 = fits.open(str(args.obs) +"-2m-" + str(timeStep+1) + "-" + str(f2).zfill(4) + "-"+str(args.ext)+".fits")
                diff2 = hdutemp2[0].data[0,0,:,:] - hdutemp1[0].data[0,0,:,:]

                if np.all(diff2 == 0):
                    continue

                noise_rms = np.sqrt(np.mean(diff2**2.0))
                signal=0

                for pointNo in range(len(contourPoints[0,:])):
                    signal+=diff2[contourPoints[0,pointNo],contourPoints[1,pointNo]]
                    signal = signal/float(len(contourPoints[0,:]))
                    snr_array[f2] = signal/noise_rms

            i_array = np.linspace(72.335,103.015,args.freqChannels)
            plt.plot(i_array,snr_array,color="black",linewidth=0.5)
            plt.grid()

        contourImg = Cutout2D(binaryMapTemp, (maxPoint[1][0],maxPoint[0][0]), (100,100),wcs=wcs)
        ax3 = plt.subplot(223,projection=contourImg.wcs)
        plt.imshow(contourImg.data, cmap=plt.cm.inferno, origin="lower")
        plt.grid()
        plt.colorbar()
        ax4 = plt.subplot(224, projection=wcs)
        plt.imshow(diff, cmap=plt.cm.inferno, origin="lower")
        plt.grid()
        plt.scatter(maxPoint[1][0],maxPoint[0][0],s=80,facecolors='none',edgecolors='lime')

        if debug is True:
            plt.show()

	else:
	    plt.savefig(str(saveFilePrefix)+ str(args.prefix) + "Sigma" + "RFIBinaryMap-t" + str(timeStep).zfill(4) + "_atFreq" + str(f).zfill(4) + ".png")
            plt.clf()


    # the below saves the found values as fits files

    if os.path.isfile(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMap-t" + str(timeStep).zfill(4) + ".fits"):
        bashSyn1 = "rm "+ str(saveFilePrefix) + str(args.prefix) + "Sigma" + "RFIBinaryMap-t" + str(timeStep).zfill(4) + ".fits"
        bashExecute1 = call(bashSyn1,shell=True)

    hdun = fits.PrimaryHDU(binaryMap,header=header)
    hdun.writeto(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMap-t" + str(timeStep).zfill(4) + ".fits")

    if os.path.isfile(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMapPeakFlux-t" + str(timeStep).zfill(4) + ".fits"):
        bashSyn3 = "rm " +str(saveFilePrefix)+ str(args.prefix) + "Sigma" + "RFIBinaryMapPeakFlux-t" + str(timeStep).zfill(4) + ".fits"
        bashExecute3 = call(bashSyn3,shell=True)

    hdun2 = fits.PrimaryHDU(binaryMapPeakFlux,header=header)
    hdun2.writeto(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMapPeakFlux-t" + str(timeStep).zfill(4) + ".fits")

    if os.path.isfile(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMapSeed-t" + str(timeStep).zfill(4) + ".fits"):
        bashSyn4  = "rm " +str(saveFilePrefix)+ str(args.prefix) + "Sigma" + "RFIBinaryMapSeed-t" + str(timeStep).zfill(4) + ".fits"       
        bashExecute4 = call(bashSyn4,shell=True)

    hdu3 =  fits.PrimaryHDU(binaryMapSeed,header=header)
    hdu3.writeto(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "RFIBinaryMapSeed-t" + str(timeStep).zfill(4) + ".fits")
 

    ## The below makes the CSV file containing the meta data from the RFISeeker
    if os.path.isfile(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "-FreqInfo-t" + str(timeStep).zfill(4)+ ".csv"):
        bashSyn2 = "rm " +str(saveFilePrefix)+ str(args.prefix) + "Sigma" + "-FreqInfo-t" + str(timeStep).zfill(4)+ ".csv"
        bashExecute2 = call(bashSyn2,shell=True)

    with open(str(saveFilePrefix)+str(args.prefix) + "Sigma" + "-FreqInfo-t" + str(timeStep).zfill(4)+ ".csv","w") as vsc:
        thewriter = csv.writer(vsc)
        thewriter.writerow(["x","y","PeakFluxDensity","NoOfChannels","DistanceFromPhaseCenter","NoOfPixels"])
        points = np.asarray(np.where(binaryMap != 0)).T

        for p in points:
            x,y = p
            peakFluxDensity = binaryMapPeakFlux[x,y]
            NoOfChannels = binarMapNoFreq[x,y]
            DistanceFromPhaseCenter = binaryMapDistFromPC[x,y]
            NoOfPixels = binaryMapNoPixels[x,y]
            line = [x,y,peakFluxDensity,NoOfChannels,DistanceFromPhaseCenter,NoOfPixels]
            thewriter.writerow(line)


if __name__ =="__main__":
    main()
